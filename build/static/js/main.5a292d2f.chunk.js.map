{"version":3,"sources":["lib/dates.ts","components/Calendar/CalendarDay.tsx","components/Calendar/CalendarWeek.tsx","components/Calendar/Calendar.tsx","lib/useIntervalHook.ts","views/Navigation/NavMenu.tsx","components/Background/FullWidthBackground.tsx","views/Home/Home.tsx","redux/actions.ts","components/Journal/Item.tsx","components/Forms/AddItemForm/AddItemForm.tsx","components/Buttons/ToggleItem.tsx","views/Calendar/Day/Day.tsx","redux/reducers/ui.ts","redux/reducers/root.ts","redux/reducers/journal.ts","redux/store.ts","App.tsx","index.tsx"],"names":["getWeekDays","totalDaysinMonth","numericalStartDay","weeks","week","weekdayCount","i","push","length","getCalendarMonth","dateRequested","dateRequestedObj","Date","numericalMonth","getMonth","monthName","toLocaleString","month","year","getFullYear","firstDay","getDay","totalDays","getDate","getTime","hour","minute","hour12","CalendarDay","props","classes","toLocaleDateString","day","className","to","CalendarWeek","map","index","Calendar","dispatch","useDispatch","calendarMonth","useSelector","state","ui","calendar","useEffect","type","monthNavHandler","direction","monthToGet","yearToGet","colSpan","icon","faAngleLeft","onClick","faAngleRight","handler","join","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","NavMenu","time","menu","useState","status","setMenu","handleMenuToggle","e","targetElementText","target","textContent","mainBg","document","getElementById","style","filter","webkitFilter","FullWidthBackground","Home","journalItemActions","getAll","items","createItem","item","JournalItem","titleType","faThumbtack","src","title","alt","a","fetch","method","headers","body","JSON","stringify","console","log","faTimes","AddItemForm","text","setTitle","isValid","file","FormData","image","setImage","onSubmit","preventDefault","form","currentTarget","itemType","value","created","now","toString","journalItem","response","json","lastId","newItem","addItem","name","defaultValue","disabled","onChange","placeholder","uploadedImage","files","imageFile","append","alert","Button","styled","button","rightAligned","css","ToggleItemButton","visibility","openText","toggle","setToggle","openTextOnly","closeText","children","months","DayView","useParams","selectedDay","journal","itemDateObj","ToggleItem","rootReducer","combineReducers","tasks","action","updatedState","Object","assign","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","App","path","component","subscribe","getState","rootElement","render"],"mappings":"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","file":"static/js/main.5a292d2f.chunk.js","sourcesContent":["import { ICalendarMonth } from \"./interface\";\n\nexport const getWeekDays = (\n  totalDaysinMonth: number,\n  numericalStartDay: number\n) => {\n  // Assumes every month starts on the first\n  // Every week must include 7 days\n  // The start day number passed in refers to numerical day of the week\n  let weeks: Array<number[]> = [];\n  let week: number[] = [];\n  let weekdayCount = 0;\n  for (let i: number = 1; i <= totalDaysinMonth; i++) {\n    if (numericalStartDay > weekdayCount) {\n      // Pushes day placholder into week array for weeks days\n      // that do no exist in week ( i.e. week starts on Wednesday)\n      i = 0;\n      week.push(0);\n      weekdayCount++;\n    } else {\n      week.push(i);\n    }\n    if (\n      week.length === 7 ||\n      (i === totalDaysinMonth && numericalStartDay < 7)\n    ) {\n      weeks.push(week);\n      week = [];\n    }\n  }\n  return weeks;\n};\n\nexport const getCalendarMonth = (dateRequested: string) => {\n  let dateRequestedObj: Date = new Date(dateRequested);\n  let numericalMonth: number = dateRequestedObj.getMonth();\n  let monthName: string = dateRequestedObj.toLocaleString(\"default\", {\n    month: \"long\"\n  });\n  let year: number = dateRequestedObj.getFullYear();\n  let firstDay: number = new Date(\n    dateRequestedObj.getFullYear(),\n    dateRequestedObj.getMonth(),\n    1\n  ).getDay();\n  let totalDays: number = new Date(year, numericalMonth + 1, 0).getDate();\n  let parsedCalendarMonth: ICalendarMonth = {\n    numericalMonth: numericalMonth,\n    monthName: monthName,\n    weeks: getWeekDays(totalDays, firstDay),\n    firstDay: firstDay,\n    totalDays: totalDays,\n    year: year\n  };\n  return parsedCalendarMonth;\n};\n\nexport const getTime = () => {\n  const currentTime = new Date();\n  return currentTime.toLocaleString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true\n  });\n};\n\nexport const getLocalISO = () => {\n  const newDate = new Date();\n  const timezone = new Date().getTimezoneOffset() * 60 * 1000;\n  const localOffset = newDate - timezone;\n  return new Date(localOffset).toISOString().slice(0, 19).replace(\"T\", \" \");\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst CalendarDay: React.FC<{\n  day: number;\n  month: number;\n  year: number;\n}> = (props) => {\n  const today: string = new Date().toLocaleDateString(\"en-US\");\n  const classes =\n    today == props.month + \"/\" + props.day + \"/\" + props.year\n      ? \"calendar__current-day\"\n      : \"\";\n  return (\n    <td className={classes}>\n      <Link to={`/calendar/${props.month}/${props.day}/${props.year}`}>\n        {props.day < 1 ? \"\" : props.day}\n      </Link>\n    </td>\n  );\n};\n\nexport default CalendarDay;\n","import React from \"react\";\nimport CalendarDay from \"./CalendarDay\";\n\nconst CalendarWeek: React.FC<{\n  week: number[];\n  month: number;\n  year: number;\n}> = (props) => {\n  return (\n    <tr>\n      {props.week.map(function (day: number, index: number) {\n        return (\n          <CalendarDay\n            key={index + day}\n            day={day}\n            month={props.month}\n            year={props.year}\n          />\n        );\n      })}\n    </tr>\n  );\n};\nexport default CalendarWeek;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCalendarMonth } from \"../../lib/dates\";\nimport CalendarWeek from \"./CalendarWeek\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./calendar.scss\";\n\nconst Calendar: React.FC<{ date: string; handler: Event }> = (props) => {\n  const dispatch = useDispatch();\n  const calendarMonth = useSelector((state) => state.ui.calendar);\n\n  useEffect(() => {\n    dispatch({\n      type: \"UPDATE_CALENDAR\",\n      calendarMonth: calendarMonth\n    });\n  }, []);\n\n  const monthNavHandler = (direction: string) => {\n    let monthToGet = calendarMonth.numericalMonth;\n    let yearToGet = calendarMonth.year;\n    if (\n      calendarMonth.numericalMonth >= 1 ||\n      calendarMonth.numericalMonth <= 12\n    ) {\n      monthToGet = \"previous\" === direction ? monthToGet-- : monthToGet + 2;\n    }\n    if (monthToGet === 0) {\n      monthToGet = 12;\n      yearToGet--;\n    }\n    if (monthToGet === 13) {\n      monthToGet = 1;\n      yearToGet++;\n    }\n    const dateToGet = monthToGet + \"/01/\" + yearToGet;\n    dispatch({\n      type: \"UPDATE_CALENDAR\",\n      calendarMonth: getCalendarMonth(new Date(dateToGet))\n    });\n  };\n\n  return (\n    <div className=\"calendar\">\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={7}>\n              <div className=\"calendar__title\">\n                <FontAwesomeIcon\n                  icon={faAngleLeft}\n                  onClick={() => {\n                    monthNavHandler(\"previous\");\n                  }}\n                />\n                <div>\n                  {calendarMonth.monthName} {calendarMonth.year}\n                </div>\n                <FontAwesomeIcon\n                  icon={faAngleRight}\n                  onClick={() => {\n                    monthNavHandler(\"next\");\n                  }}\n                />\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th>Sun</th>\n            <th>Mon</th>\n            <th>Tues</th>\n            <th>Weds</th>\n            <th>Thurs</th>\n            <th>Fri</th>\n            <th>Sat</th>\n          </tr>\n        </thead>\n        <tbody onClick={props.handler}>\n          {calendarMonth.weeks.map((week) => (\n            <CalendarWeek\n              key={week.join(\"\")}\n              week={week}\n              month={calendarMonth.numericalMonth + 1}\n              year={calendarMonth.year}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Calendar;\n","import { useEffect, useRef } from \"react\";\n\n// useInterval hook from\n// https://usehooks-typescript.com/react-hook/use-interval\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    if (delay === null) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Calendar from \"../../components/Calendar/Calendar\";\nimport { getTime } from \"../../lib/dates\";\nimport useInterval from \"../../lib/useIntervalHook\";\n\nimport \"./nav.scss\";\n//import ToggleItemButton from \"../../components/Buttons/ToggleItem\";\n\nconst NavMenu: React.FC = (props) => {\n  const dispatch = useDispatch();\n  const time = useSelector((state) => state.ui.menu.time);\n\n  const [menu, setMenu] = useState({\n    status: \"closed\"\n  });\n\n  const handleMenuToggle = (e) => {\n    const targetElementText = e.target.textContent;\n    if (\"prev\" === targetElementText || \"next\" === targetElementText) {\n      return;\n    }\n    let status = \"\";\n    const mainBg = document.getElementById(\"fullWidthBackground__main\");\n    if (\"closed\" === menu.status) {\n      status = \"open\";\n      if (mainBg) {\n        // Set navigation background css\n        mainBg.style.filter = \"blur(1rem)\";\n        mainBg.style.webkitFilter = \"blur(rem)\";\n      }\n    } else {\n      status = \"closed\";\n      if (mainBg) {\n        // Set navigation background css\n        mainBg.style.filter = \"\";\n        mainBg.style.webkitFilter = \"\";\n      }\n    }\n    setMenu({\n      status: status\n    });\n  };\n\n  useEffect(() => {\n    dispatch({ type: \"UPDATE_TIME\", time: getTime() });\n  }, []);\n  useInterval(() => {\n    dispatch({ type: \"UPDATE_TIME\", time: getTime() });\n  }, 60000);\n\n  return (\n    <nav className={`nav nav__${menu.status}`}>\n      <div className=\"nav__buttons\">\n        <Link to=\"/\">\n          <p className=\"nav__buttons__time\">{time}</p>\n        </Link>\n        <button\n          className=\"nav__buttons__menuToggleBtn\"\n          onClick={handleMenuToggle}>\n          <span></span>\n          <span></span>\n        </button>\n      </div>\n      <div className=\"nav__menu\">\n        <h1>Quick Notes</h1>\n        <p>A journal for when you don't have time to journal.</p>\n        <ul>\n          <li>Items can only be added from any day to the current day.</li>\n          <li>You cannot add past or future items.</li>\n          <li>The abiility to edit any day's items is being worked on.</li>\n          <li>\n            The abilty to auto-migrate an item from day-to-day until it is\n            complete is being worked on.\n          </li>\n          <li>\n            The ability to add custom tasks and task icons is being worked on.\n          </li>\n        </ul>\n        <div className=\"nav__menu__content\">\n          <Calendar handler={handleMenuToggle} />\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavMenu;\n","import React from \"react\";\nimport \"./fullWidthBackground.scss\";\n\nconst FullWidthBackground: React.FC<{ id: string }> = (props) => (\n  <div\n    id={`fullWidthBackground__${props.id}`}\n    className=\"fullWidthBackground\"></div>\n);\n\nexport default FullWidthBackground;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport Calendar from \"../../components/Calendar/Calendar\";\nimport NavMenu from \"../Navigation/NavMenu\";\nimport FullWidthBackground from \"../../components/Background/FullWidthBackground\";\nimport \"./home.scss\";\n\nconst Home: React.FC = (props) => {\n  return (\n    <Fragment>\n      <FullWidthBackground id=\"main\" />\n      <NavMenu />\n      <div className=\"home\">\n        <Calendar />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import {\n  IJournalItem,\n  IJournalItemAction,\n  IJournalItemData\n} from \"../lib/interface\";\nimport { Dispatch } from \"redux\";\n\nimport { getLocalISO } from \"../lib/dates\";\n\nexport const journalItemActions = {\n  CREATE_ITEM: \"CREATE_ITEM\",\n  GET_ALL_ITEMS: \"GET_ALL_ITEMS\",\n  DELETE_ITEM: \"DELETE_ITEM\"\n};\n\nexport const getAll = (items: IJournalItem[]): IJournalItemAction => {\n  return { type: journalItemActions.GET_ALL_ITEMS, items: items };\n};\n\nexport const createItem = (item: IJournalItem): IJournalItemAction => {\n  return { type: journalItemActions.CREATE_ITEM, item: item };\n};\n\nexport const fetchAllItems = () => {\n  return async (dispatch: (items: IJournalItemAction) => void) => {\n    const response = await fetch(\"/api/v1/items\");\n    const items = await response.json();\n    dispatch(getAll(items));\n  };\n};\n\nexport const addItem = (item: IJournalItem) => {\n  return async (dispatch: Dispatch<IJournalItemAction>) => {\n    try {\n      const response = await fetch(\"/api/v1/items\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(item)\n      });\n      const lastId = await response.json();\n      const newItem = {\n        id: lastId.id,\n        ...item,\n        created: Date.now()\n      };\n      dispatch(createItem(newItem));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\n\nexport const addImageItem = (imageItem: IJournalItemData) => {\n  return async (dispatch: Dispatch<IJournalItemAction>) => {\n    // Add image\n    if (imageItem.image && imageItem.item) {\n      let postImageResponse = await fetch(\"/api/v1/items/image\", {\n        method: \"POST\",\n        body: imageItem.image\n      });\n      let fileName = await postImageResponse.json();\n      imageItem.item.title = fileName.filename;\n      // Add item\n      const postItemResponse = await fetch(\"/api/v1/items\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(imageItem.item)\n      });\n      const lastId = await postItemResponse.json();\n      const newItem = {\n        id: lastId.id,\n        ...imageItem.item,\n        created: getLocalISO()\n      };\n      if (newItem) {\n        dispatch(createItem(newItem));\n      }\n    }\n  };\n};\n\nexport const deleteItem = (item: IJournalItem) => {\n  return async (dispatch: Dispatch) => {\n    try {\n      // Delete item\n      await fetch(\"/api/v1/items\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(item)\n      });\n      dispatch({ type: journalItemActions.DELETE_ITEM, item: item });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faThumbtack, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { IJournalItem } from \"../../lib/interface\";\nimport { deleteItem } from \"../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport \"./item.scss\";\n\nconst JournalItem: React.FC<{\n  item: IJournalItem;\n}> = (props) => {\n  let dispatch = useDispatch();\n  const handleRemoveBtn = (e: any) => {\n    dispatch(deleteItem(props.item));\n  };\n  return (\n    <li className={`journalItem journalItem--${props.item.titleType}`}>\n      <button className=\"journalItem__icon\">\n        <FontAwesomeIcon icon={faThumbtack} />\n      </button>\n      <div className=\"journalItem__content\">\n        {\"image\" === props.item.titleType ? (\n          <img\n            src={\n              `https://uwido-3001.sse.codesandbox.io/uploads/` +\n              props.item.title\n            }\n            alt={props.item.title}\n          />\n        ) : (\n          <p>{props.item.title}</p>\n        )}\n      </div>\n      <div className=\"journalItem__controls\">\n        <button onClick={handleRemoveBtn}>\n          <FontAwesomeIcon icon={faTimes} />\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default JournalItem;\n","import React, { Fragment, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addItem, addImageItem } from \"../../../redux/actions\";\nimport {\n  IJournalItem,\n  IJournalItemData,\n  IFormImageFieldState,\n  IFormTitleState\n} from \"../../../lib/interface\";\nimport \"./addItemForm.scss\";\n\nconst AddItemForm: React.FC<{}> = (props) => {\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState<IFormTitleState>({\n    text: \"\",\n    type: \"text\"\n  });\n  const [image, setImage] = useState<IFormImageFieldState>({\n    isValid: false,\n    file: new FormData()\n  });\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const form: HTMLFormElement = e.currentTarget;\n\n    // Setting up journal item\n    const item: IJournalItem = {\n      title: title.text,\n      titleType: title.type,\n      type: form.itemType.value,\n      created: Date.now().toString()\n    };\n\n    let journalItem: IJournalItemData = {\n      image: new FormData(),\n      item: item\n    };\n\n    // Checking for image adding it if there\n    if (\"image\" === form.titleType.value && image.isValid) {\n      if (journalItem.image) {\n        journalItem.image = image.file;\n      }\n      //dispatch(addImageItem(journalItem));\n    } else {\n      dispatch(addItem(item));\n    }\n  };\n\n  // Update title on input change\n  const handleTitleChange = (e: any) => {\n    setTitle({\n      ...title,\n      text: e.target.value\n    });\n  };\n\n  // Update title type on input change\n  const handleTitleTypeChange = (e: any) => {\n    setTitle({\n      ...title,\n      type: e.target.value\n    });\n  };\n\n  // Validate and grab image file on upload\n  const handleImageChange = (e: any) => {\n    const uploadedImage = e.target.files[0];\n    // check for valid mime type\n    if (\n      \"image/png\" === uploadedImage.type ||\n      \"image/jpg\" === uploadedImage.type ||\n      \"image/jpeg\" === uploadedImage.type\n    ) {\n      // Roll valid image into formdata for dispatch\n      const imageFile: FormData = new FormData();\n      imageFile.append(\"imageFile\", e.target.files[0]);\n      setImage({\n        isValid: true,\n        file: imageFile\n      });\n    } else {\n      // Send invalid file alert\n      alert(\n        \"Stop that! This is a sandbox. You can't upload that file. Tsk.Tsk.\"\n      );\n      setImage({\n        ...image,\n        isValid: false\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <legend>\n        <p>\n          <em>\n            Remember! New journal items can only be added to the current day.\n            See menu to learn how to make unfinished items carry over.\n          </em>\n        </p>\n      </legend>\n      <select name=\"itemType\" id=\"itemType\" defaultValue=\"\">\n        <option key=\"addTask-option-none\" value=\"\" disabled={true}>\n          What type of item is this?\n        </option>\n        <option key=\"addTask-option-todo\" value=\"todo\">\n          Task\n        </option>\n      </select>\n      <select\n        name=\"titleType\"\n        id=\"titleType\"\n        onChange={handleTitleTypeChange}\n        defaultValue=\"\">\n        <option key=\"titleTypeDefault\" value=\"\" disabled={true}>\n          Will you be using an image or text?\n        </option>\n        <option key=\"titleTypeText\" value=\"text\">\n          Text\n        </option>\n        <option key=\"titleTypeImage\" value=\"image\">\n          Image\n        </option>\n      </select>\n      {\"text\" === title.type ? (\n        <Fragment>\n          <input\n            data-test=\"titleText\"\n            type=\"text\"\n            name=\"titleText\"\n            onChange={handleTitleChange}\n            placeholder=\"Type your text here...\"\n          />\n        </Fragment>\n      ) : (\n        \"\"\n      )}\n      {\"image\" === title.type ? (\n        <Fragment>\n          <input\n            type=\"file\"\n            name=\"titleImage\"\n            data-test=\"titleImage\"\n            onChange={handleImageChange}\n          />\n        </Fragment>\n      ) : (\n        \"\"\n      )}\n      <button type=\"submit\">Add Journal Item</button>\n    </form>\n  );\n};\n\nexport default AddItemForm;\n","import React, { useState, Fragment } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst Button = styled.button`\n  float: left;\n  ${(props) =>\n    props.rightAligned &&\n    css`\n      float: right;\n    `}\n`;\nconst ToggleItemButton: React.FC<{\n  openText: string;\n  closeText: string;\n  openTextOnly: boolean;\n  rightAligned: boolean;\n}> = (props) => {\n  const [toggle, setToggle] = useState({\n    visibility: false,\n    text: props.openText\n  });\n\n  const handleToggle = () => {\n    if (toggle.visibility) {\n      setToggle({\n        visibility: false,\n        text: props.openText\n      });\n    } else {\n      setToggle({\n        visibility: true,\n        text: !props.openTextOnly ? props.closeText : props.openText\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Button onClick={handleToggle} rightAligned={props.rightAligned}>\n        {toggle.text}\n      </Button>\n      {toggle.visibility && props.children}\n    </Fragment>\n  );\n};\n\nexport default ToggleItemButton;\n","import React, { Fragment } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport \"./dayView.scss\";\nimport JournalItem from \"../../../components/Journal/Item\";\nimport NavMenu from \"../../Navigation/NavMenu\";\nimport FullWidthBackground from \"../../../components/Background/FullWidthBackground\";\nimport { JournalItem as JournalItemType } from \"../../../lib/types\";\nimport AddItemForm from \"../../../components/Forms/AddItemForm/AddItemForm\";\nimport ToggleItemButton from \"../../../components/Buttons/ToggleItem\";\ninterface dayViewDate {\n  month: string;\n  day: string;\n  year: string;\n}\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst DayView: React.FC<{}> = (props): JSX.Element => {\n  const day: dayViewDate = useParams();\n  const selectedDay = day.month + \"/\" + day.day + \"/\" + day.year;\n  const items = useSelector((state) => state.journal.items);\n  return (\n    <Fragment>\n      <FullWidthBackground id=\"main\" />\n      <NavMenu />\n      <div className=\"dayView\">\n        <h1>\n          {\" \"}\n          {months[day.month - 1]} {day.day}, {day.year}\n        </h1>\n        <ul>\n          {items.length > 0 &&\n            items.map((item: JournalItemType): void | JSX.Element => {\n              if (item.id && item.created) {\n                let itemDateObj: Date = new Date(item.created);\n                let itemDate: string =\n                  itemDateObj.getMonth() +\n                  1 +\n                  \"/\" +\n                  itemDateObj.getDate() +\n                  \"/\" +\n                  itemDateObj.getFullYear();\n                if (itemDate === selectedDay) {\n                  return <JournalItem key={item.id} item={item} />;\n                }\n              }\n            })}\n          <li className=\"dayView__addFormItem\">\n            <ToggleItemButton\n              openText=\"New Journal Item\"\n              closeText=\"Done Adding Items\">\n              <AddItemForm />\n            </ToggleItemButton>\n          </li>\n        </ul>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default DayView;\n","import { Ui as UiType } from \"../../lib/types\";\nimport { getCalendarMonth, getTime } from \"../../lib/dates\";\n\nconst ui: UiType = {\n  calendar: getCalendarMonth(new Date().toString()),\n  menu: {\n    status: \"closed\",\n    time: \"\"\n  }\n};\n\nexport const uiReducer = (state = ui, action: any) => {\n  let updatedState: UiType = Object.assign({}, state);\n  switch (action.type) {\n    case \"UPDATE_TIME\":\n      updatedState.menu.time = getTime();\n      break;\n    case \"UPDATE_CALENDAR\":\n      updatedState.calendar = action.calendarMonth;\n      break;\n    case \"UPDATE_NAV_STATUS\":\n      updatedState.menu.status = action.status;\n      break;\n  }\n  return updatedState;\n};\n","import { combineReducers } from \"redux\";\nimport { journalReducer } from \"./journal\";\nimport { uiReducer } from \"./ui\";\n\nexport const rootReducer = combineReducers({\n  journal: journalReducer,\n  ui: uiReducer\n});\n","import { Journal } from \"../../lib/types\";\nimport { IJournalReducerAction } from \"../../lib/interface\";\nimport { journalItemActions } from \"../actions\";\n\nexport const journalReducer = (\n  state: Journal = { items: [], tasks: [] },\n  action: IJournalReducerAction\n) => {\n  let updatedState = Object.assign({}, state);\n  switch (action.type) {\n    case journalItemActions.CREATE_ITEM:\n      updatedState.items = [...updatedState.items, action.item];\n      break;\n    case journalItemActions.GET_ALL_ITEMS:\n      updatedState.items = action.items;\n      break;\n    case journalItemActions.DELETE_ITEM:\n      updatedState.items = updatedState.items.filter((item) => {\n        return item.id !== action.item.id;\n      });\n      break;\n  }\n  return updatedState;\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"../redux//reducers/root\";\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware));\n\nexport const store = createStore(rootReducer, composedEnhancer);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nstore.subscribe(() => {\n  console.log(store.getState());\n});\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"normalize.css\";\nimport \"./styles.scss\";\nimport Home from \"./views/Home/Home\";\nimport DayView from \"./views/Calendar/Day/Day\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { fetchAllItems } from \"../src/redux/actions\";\n\nstore.dispatch(fetchAllItems());\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/calendar/:month/:day/:year\" component={DayView} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n","import { render } from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}