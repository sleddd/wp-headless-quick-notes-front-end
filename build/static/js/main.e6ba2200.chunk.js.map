{"version":3,"sources":["components/Background/FullWidthBackground.tsx","lib/dates.js","lib/useIntervalHook.js","components/Clock/Clock.js","hooks/use-auth.js","components/Auth/Logout.js","components/Auth/Login.js","components/FullWidthMenu/FullWidthMenu.js","hooks/use-toggle-class.js","views/Navbar/navbar.js","components/Calendar/CalendarDay.js","components/Calendar/CalendarWeek.js","components/Calendar/Calendar.js","views/Home/Home.js","graphql/queries/queries.js","graphql/queries/getTopics.js","graphql/queries/getJournalByDate.js","graphql/mutations/mutations.js","graphql/mutations/createJournal.js","graphql/mutations/updateJournal.js","graphql/mutations/deleteJournal.js","components/TopicPicker/TopicPicker.js","components/Journal/JournalItem.js","components/Journal/JournalItemNew.js","components/Journal/Journal.js","views/Day/Day.js","redux/reducers/ui.js","redux/reducers/root.js","redux/store.js","hooks/use-app-apollo.js","App.js","index.js"],"names":["FullWidthBackground","props","id","className","getWeekDays","totalDaysinMonth","numericalStartDay","weeks","week","weekdayCount","i","push","length","getCalendarMonth","dateRequested","dateRequestedObj","Date","numericalMonth","getMonth","monthName","toLocaleString","month","year","getFullYear","firstDay","getDay","totalDays","getDate","getTime","hour","minute","hour12","months","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","Clock","useState","time","setTime","DEFAULT_STATE","loggedIn","user","undefined","loading","error","AuthContext","createContext","GET_USER","gql","AuthProvider","children","useQuery","data","viewer","value","Boolean","Provider","useAuth","useContext","LOGOUT","Logout","apolloClient","useApolloClient","useMutation","refetchQueries","query","mutation","firstName","onClick","e","preventDefault","clearStore","window","location","reload","LOG_IN","LogInForm","logIn","method","onSubmit","event","formData","FormData","currentTarget","Object","fromEntries","username","password","variables","login","catch","console","type","name","autoComplete","FullWidthMenu","useToggleClass","currentClass","toggleClasses","toggleClass","setToggleClass","toggle","useCallback","Navbar","open","closed","to","CalendarDay","classes","toLocaleDateString","day","CalendarWeek","map","index","Calendar","dispatch","useDispatch","calendarMonth","useSelector","state","ui","calendar","monthNavHandler","direction","monthToGet","yearToGet","toString","colSpan","icon","size","color","handler","join","Home","queries","getTopics","getJournalByDate","mutations","createJournal","updateJournal","deleteJournal","compose","graphql","topics","setTopics","currentTopic","selectedTopic","setSelectedTopic","queriedTopics","topicQuery","nodes","sort","a","b","topicSelectedHandler","sortedTopics","customFields","journalTopicFieldIcon","topic","journalTopicFieldColor","JournalItem","journalId","topicId","title","deleteItemHandler","onEnterHandler","capabilities","indexOf","rows","defaultValue","onKeyUp","onChange","JournalItemNew","placeholder","Journal","journal","journalItem","journalEntryFieldTitle","match","params","userID","databaseId","journalQuery","parseInt","author","journals","refetch","onSubmitHandler","listItems","document","querySelectorAll","entries","forEach","listItem","textareas","other","inputs","titleElement","idElement","input","classList","contains","log","entry","journal_entry_field_title","update","cache","writeQuery","alert","target","keyCode","shiftKey","rootReducer","combineReducers","action","updatedState","assign","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","subscribe","InMemoryCache","process","GRAPHQL","httpLink","BatchHttpLink","uri","credentials","App","client","ApolloClient","link","ApolloProvider","path","component","Day","render","getElementById"],"mappings":"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","file":"static/js/main.e6ba2200.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./fullWidthBackground.scss\";\n\nconst FullWidthBackground: React.FC<{ id: string }> = (props) => (\n  <div\n    id={`fullWidthBackground__${props.id}`}\n    className=\"fullWidthBackground\"></div>\n);\n\nexport default FullWidthBackground;\n","\nexport const getWeekDays = (\n  totalDaysinMonth,\n  numericalStartDay\n) => {\n  // Assumes every month starts on the first\n  // Every week must include 7 days\n  // The start day number passed in refers to numerical day of the week\n  let weeks = [];\n  let week = [];\n  let weekdayCount = 0;\n  for (let i = 1; i <= totalDaysinMonth; i++) {\n    if (numericalStartDay > weekdayCount) {\n      // Pushes day placholder into week array for weeks days\n      // that do no exist in week ( i.e. week starts on Wednesday)\n      i = 0;\n      week.push(0);\n      weekdayCount++;\n    } else {\n      week.push(i);\n    }\n    if (\n      week.length === 7 ||\n      (i === totalDaysinMonth && numericalStartDay < 7)\n    ) {\n      weeks.push(week);\n      week = [];\n    }\n  }\n  return weeks;\n};\n\nexport const getCalendarMonth = (dateRequested) => {\n  let dateRequestedObj = new Date(dateRequested);\n  let numericalMonth = dateRequestedObj.getMonth();\n  let monthName = dateRequestedObj.toLocaleString(\"default\", {\n    month: \"long\"\n  });\n  let year = dateRequestedObj.getFullYear();\n  let firstDay = new Date(\n    dateRequestedObj.getFullYear(),\n    dateRequestedObj.getMonth(),\n    1\n  ).getDay();\n  let totalDays = new Date(year, numericalMonth + 1, 0).getDate();\n  let parsedCalendarMonth = {\n    numericalMonth: numericalMonth,\n    monthName: monthName,\n    weeks: getWeekDays(totalDays, firstDay),\n    firstDay: firstDay,\n    totalDays: totalDays,\n    year: year\n  };\n  return parsedCalendarMonth;\n};\n\nexport const getTime = () => {\n  const currentTime = new Date();\n  return currentTime.toLocaleString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true\n  });\n};\n\nexport const getLocalISO = () => {\n  const newDate = new Date();\n  const timezone = new Date().getTimezoneOffset() * 60 * 1000;\n  const localOffset = newDate - timezone;\n  return new Date(localOffset).toISOString().slice(0, 19).replace(\"T\", \" \");\n};\n\nexport const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n","import { useEffect, useRef } from \"react\";\n\n// useInterval hook from\n// https://usehooks-typescript.com/react-hook/use-interval\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    if (delay === null) {\n      return;\n    }\n    const id = setInterval(() => savedCallback.current(), delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from \"react\";\nimport { getTime } from \"../../lib/dates\";\nimport useInterval from \"../../lib/useIntervalHook\";\nimport './clock.scss';\n\nexport const Clock = (props) => {\n  const [time, setTime] = useState();\n  useEffect(() => {\n    setTime(getTime());\n  }, []);\n  useInterval(() => {\n    setTime(getTime());\n  }, 10000);\n  return <p className={props.className}>{time}</p>;\n};\n","import { useQuery, gql } from \"@apollo/client\";\nimport { useDispatch } from \"react-redux\";\nimport React, { createContext, useContext } from \"react\";\n\nconst DEFAULT_STATE = {\n  loggedIn: false,\n  user: undefined,\n  loading: false,\n  error: undefined,\n};\n\nexport const AuthContext = createContext(DEFAULT_STATE);\n\nexport const GET_USER = gql`\n  query getUser {\n    viewer {\n      id\n      databaseId\n      firstName\n      lastName\n      nicename\n      email\n      capabilities\n    }\n  }\n`;\n\nexport function AuthProvider({ children }) {\n  const { data, loading, error } = useQuery(GET_USER);\n  const user = data?.viewer;\n  const loggedIn = Boolean(user);\n\n  const value = {\n    loggedIn,\n    user,\n    loading,\n    error,\n  };\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nconst useAuth = () => useContext(AuthContext);\n\nexport default useAuth;","import React from \"react\";\nimport { gql, useMutation, useApolloClient } from \"@apollo/client\";\n\nimport useAuth, { GET_USER } from \"../../hooks/use-auth\";\n\nconst LOGOUT = gql`\n\tmutation Logout {\n\t\tlogout(input: {}) {\n\t\t\tstatus\n\t\t}\n\t}\n`;\n\nexport const Logout = (props) => {\n    const apolloClient                  = useApolloClient();\n    const { user, loggedIn }            = useAuth();\n    const [ mutation, mutationResults ] = useMutation( LOGOUT, {\n        refetchQueries: [\n          { query: GET_USER }\n        ],\n    } );\n\n    const handleLogout = (e) => {\n        e.preventDefault();\n        mutation();\n        apolloClient.clearStore();\n        window.location.reload();\n    }\n  \n    return(\n        <div id=\"logoutForm\">\n            <h1>{`Hello ${ user ? user.firstName : ''}!`}</h1>\n            <button onClick={handleLogout}>LOGOUT</button> \n        </div>\n    );\n}","import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport useAuth, { GET_USER, AuthProvider } from \"../../hooks/use-auth\";\nimport { Logout } from \"../../components/Auth/Logout\";\n\nconst LOG_IN = gql`\n  mutation logIn($login: String!, $password: String!) {\n    loginWithCookies(input: {login: $login, password: $password }) {\n      clientMutationId\n      status\n    }\n  }\n`;\n\n\nexport default function LogInForm() {\n  const { loggedIn } = useAuth();\n  const [logIn, { data, query, loading, error }] = useMutation( LOG_IN, {\n    refetchQueries: [\n      { query: GET_USER }\n    ],\n  });\n\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData            = new FormData(event.currentTarget);\n    const { username, password } = Object.fromEntries(formData);\n    logIn({\n      variables: {\n        login: username,\n        password,\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n \n \n  return (\n    <AuthProvider>\n      { ! loggedIn ?\n      <form id=\"loginForm\" method=\"post\" onSubmit={handleSubmit}>\n        <h1>Login</h1>\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\" id=\"username\" autoComplete=\"username\" />\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\" id=\"password\" autoComplete=\"password\" />\n        <input type=\"submit\"></input>\n      </form> : <Logout/> }\n    </AuthProvider>\n  );\n}","import React from \"react\";\nimport LogInForm from \"../Auth/Login\";\nimport \"./fullWidthMenu.scss\";\n\nconst FullWidthMenu = (props) =>{\n    return (\n    <div\n        id=\"menu\"\n        className={`menu ${props.className}`}>\n            <LogInForm/>\n    </div>\n) };\n\nexport default FullWidthMenu;\n","import React, { useState, useCallback } from \"react\";\n\nexport const useToggleClass = ( currentClass, toggleClasses ) => {\n    // Set toggle class in state\n    const [toggleClass, setToggleClass ] = useState(currentClass);\n    /// Set toggle handler \n    const toggle = useCallback(() => setToggleClass(toggleClasses[toggleClass]));\n    return [toggleClass, toggle, toggleClasses];\n}","/*\n* External Dependencies\n*/\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/*\n* Internal Dependencies\n*/\nimport { Clock } from \"../../components/Clock/Clock\";\nimport FullWidthMenu from \"../../components/FullWidthMenu/FullWidthMenu\";\nimport { useToggleClass } from \"../../hooks/use-toggle-class\";\n\nimport \"./navbar.scss\";\n\nconst Navbar = () => {\n  const [toggleClass, toggle] = useToggleClass('closed', {\n    open: 'closed',\n    closed: 'open'\n  });\n  \n  return (\n    <Fragment>\n      <div className=\"navbar\">\n        <Link to=\"/\">\n          <Clock className=\"clock\" />\n        </Link>\n        <div className={`hamburger ${toggleClass}`} onClick={toggle}>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n      <FullWidthMenu className={toggleClass} />\n    </Fragment>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst CalendarDay = (props) => {\n  const today = new Date().toLocaleDateString(\"en-US\");\n  const classes =\n    today == props.month + \"/\" + props.day + \"/\" + props.year\n      ? \"calendar__current-day\"\n      : \"\";\n  return (\n    <td className={classes}>\n        <Link to={`/calendar/${props.month}/${props.day}/${props.year}`}>\n          {props.day < 1 ? \"\" : props.day}\n        </Link>\n    </td>\n  );\n};\n\nexport default CalendarDay;\n","import React from \"react\";\nimport CalendarDay from \"./CalendarDay\";\n\nconst CalendarWeek = (props) => {\n  return (\n    <tr>\n      {props.week.map(function (day, index) {\n        return (\n          <CalendarDay\n            key={index + day}\n            day={day}\n            month={props.month}\n            year={props.year}\n          />\n        );\n      })}\n    </tr>\n  );\n};\nexport default CalendarWeek;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCalendarMonth } from \"../../lib/dates\";\nimport CalendarWeek from \"./CalendarWeek\";\nimport { IconPickerItem } from \"react-fa-icon-picker\";\nimport \"./calendar.scss\";\n\nconst Calendar = (props) => {\n  const dispatch = useDispatch();\n  const calendarMonth = useSelector((state) => state.ui.calendar);\n\n  useEffect(() => {\n    dispatch({\n      type: \"UPDATE_CALENDAR\",\n      calendarMonth: calendarMonth\n    });\n  }, []);\n\n  const monthNavHandler = (direction) => {\n    let monthToGet = calendarMonth.numericalMonth;\n    let yearToGet = calendarMonth.year;\n    if (\n      calendarMonth.numericalMonth >= 1 ||\n      calendarMonth.numericalMonth <= 12\n    ) {\n      monthToGet = \"previous\" === direction ? monthToGet-- : monthToGet + 2;\n    }\n    if (monthToGet === 0) {\n      monthToGet = 12;\n      yearToGet--;\n    }\n    if (monthToGet === 13) {\n      monthToGet = 1;\n      yearToGet++;\n    }\n    const dateToGet = monthToGet + \"/01/\" + yearToGet;\n    dispatch({\n      type: \"UPDATE_CALENDAR\",\n      calendarMonth: getCalendarMonth(new Date(dateToGet).toString())\n    });\n  };\n\n  return (\n    <div className=\"calendar\">\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={7}>\n              <div className=\"calendar__title\">\n                <IconPickerItem\n                  icon=\"FaAngleLeft\"\n                  size={20}\n                  color=\"#fff\"\n                  onClick={() => {\n                    monthNavHandler(\"previous\");\n                  }}\n                />\n                <div>\n                  {calendarMonth.monthName} {calendarMonth.year}\n                </div>\n\n                <IconPickerItem\n                  icon=\"FaAngleRight\"\n                  size={20}\n                  color=\"#fff\"\n                  onClick={() => {\n                    monthNavHandler(\"next\");\n                  }}\n                />\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th>Sun</th>\n            <th>Mon</th>\n            <th>Tues</th>\n            <th>Weds</th>\n            <th>Thurs</th>\n            <th>Fri</th>\n            <th>Sat</th>\n          </tr>\n        </thead>\n        <tbody onClick={props.handler}>\n          {calendarMonth.weeks.map((week) => (\n            <CalendarWeek\n              key={week.join(\"\")}\n              week={week}\n              month={calendarMonth.numericalMonth + 1}\n              year={calendarMonth.year}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Calendar;\n","import React, { Fragment } from \"react\";\nimport FullWidthBackground from \"../../components/Background/FullWidthBackground\";\nimport Navbar from \"../Navbar/navbar\";\nimport Calendar from \"../../components/Calendar/Calendar\";\nimport \"./home.scss\";\n\nconst Home = (props) => {\n  return (\n    <Fragment>\n      <FullWidthBackground id=\"main\" />\n      <Navbar/>\n      <div className=\"home\"><Calendar /></div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import getTopics from \"./getTopics\";\nimport getJournalByDate from \"./getJournalByDate\";\n\nexport const queries = {\n    getTopics,\n    getJournalByDate\n};","import { gql } from '@apollo/client';\n\nexport default gql`query {\n  topics {\n    nodes {\n      customFields {\n        journalTopicFieldColor\n        journalTopicFieldIcon\n      }\n      name\n      id\n      topicId\n    }\n  }\n}`;","import { gql } from '@apollo/client';\n\nexport default gql`\n  query Journal($month: Int!, $day: Int!, $year: Int!, $author: Int! ){\n    journals(first: 1000, where: {author: $author, status: PRIVATE, dateQuery: {month: $month, day: $day, year: $year}}) {\n      nodes {\n        id\n        journalId\n        title\n        customFields {\n          journalEntryFieldTitle\n          journalEntryFieldImage {\n            mediaItemUrl\n          }\n        }\n        topics {\n          nodes {\n            id\n            topicId\n            name\n            customFields {\n              journalTopicFieldColor\n              journalTopicFieldIcon\n            }\n          }\n        }\n      }\n    }\n  }\n`;","import createJournal from '../mutations/createJournal';\nimport updateJournal from '../mutations/updateJournal';\nimport deleteJournal from '../mutations/deleteJournal';\n\nexport const mutations = {\n    createJournal,\n    updateJournal,\n    deleteJournal\n};","import { gql } from '@apollo/client';\n\nexport default gql`\nmutation MyMutation( $journal_entry_field_title: String!, $topicId: ID!, $title: String!) {\n  createJournal(\n    input: {journal_entry_field_title: $journal_entry_field_title, topics: {nodes: {id: $topicId }}, title: $title, status: PRIVATE}\n  ) {\n    journal {\n      id\n      journalId\n      title\n      customFields {\n        journalEntryFieldTitle\n        journalEntryFieldImage {\n          mediaItemUrl\n        }\n      }\n      topics {\n        nodes {\n          id\n          topicId\n          name\n          customFields {\n            journalTopicFieldColor\n            journalTopicFieldIcon\n          }\n        }\n      }\n    }\n  }\n}`;","import { gql } from '@apollo/client';\n\nexport default gql`\nmutation MyMutation($id: ID!, $journal_entry_field_title: String!, $topicId: ID!) {\n  updateJournal(\n    input: {id: $id, journal_entry_field_title: $journal_entry_field_title, topics: {append: false, nodes: {id: $topicId}}}\n  ) {\n    journal {\n      journalId\n    }\n  }\n}`;\n\n","import { gql } from '@apollo/client';\n\nexport default gql`mutation($id: ID!) {\n    deleteJournal(input: {id: $id}) {\n        deletedId\n      }\n}`;\n  ","/*\n* External Dependencies\n*/\nimport React, { useState, useEffect } from \"react\";\nimport { graphql } from \"@apollo/react-hoc\";\nimport { compose } from 'recompose';\n\n\n/*\n* Internal Dependencies\n*/\nimport { IconPickerItem } from \"react-fa-icon-picker\";\nimport { queries } from \"../../graphql/queries/queries\";\nimport { useToggleClass } from \"../../hooks/use-toggle-class\";\n\n\nimport \"./topicPicker.scss\";\n\nconst TopicPicker = (props) => {\n    const [toggleClass, toggle] = useToggleClass('closed', {\n        open: 'closed',\n        closed: 'open'\n    });\n\n    const [topics, setTopics] = useState([]);\n    const [selectedTopic, setSelectedTopic] = useState(props.currentTopic);\n\n    useEffect(() => {\n        // Sort topics so selected topic is on top.\n        const queriedTopics = props.topicQuery.topics ? [...props.topicQuery.topics.nodes] : [];\n        queriedTopics.sort((a, b) => (a.id === selectedTopic ? -1 : 0));\n        setTopics(queriedTopics);\n    }, [props.topicQuery]);\n\n\n    const topicSelectedHandler = (e) => {\n        const sortedTopics = [...topics];\n        // Set selected topic and move topic to top of list.\n        sortedTopics.sort((a, b) => {\n            if (a.customFields.journalTopicFieldIcon === e) {\n                setSelectedTopic(a.id);\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        setTopics(sortedTopics);\n    };\n\n    return (\n        <div className=\"topicPicker\" onClick={toggle} >\n            <input className=\"topicPicker__selected-topic\" type=\"hidden\" value={selectedTopic} />\n            <div className=\"topicPicker__topic\">\n                <div className={`topicPicker__topic__options ${toggleClass}`}>\n                    {topics.map((topic) => {\n                        return (\n                            <>\n                                <IconPickerItem\n                                    icon={topic.customFields.journalTopicFieldIcon}\n                                    size={24}\n                                    color={topic.customFields.journalTopicFieldColor}\n                                    onClick={topicSelectedHandler}\n                                />\n                                <input type=\"hidden\" value={topic.id} />\n                            </>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default compose(\n    graphql( queries.getTopics, { name: 'topicQuery' })\n)(TopicPicker);","import React from \"react\";\nimport TopicPicker from \"../TopicPicker/TopicPicker\";\nimport useAuth from \"../../hooks/use-auth\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nexport const JournalItem = ({\n    id,\n    journalId,\n    topicId,\n    title,\n    deleteItemHandler,\n    onEnterHandler\n}) => {\n    const { user, loggedIn } = useAuth();\n    return (\n        <>\n        { ( loggedIn && user && user.capabilities.indexOf('edit_posts') != -1 ) && \n        <li className=\"journal__item\">\n            <div className=\"journal__item__topic\">\n                <TopicPicker\n                    key={`item-${journalId}-${topicId}`}\n                    currentTopic={topicId} />\n            </div>\n            <div className=\"journal__item__entry\">\n                <TextareaAutosize \n                    id={`item-title-${journalId}`} \n                    className=\"grow-wrap\"\n                    rows=\"1\" \n                    defaultValue={title}\n                    onKeyUp={onEnterHandler}\n                />\n                <input id={`item-id-${journalId}`} type=\"hidden\" value={id} />\n            </div>\n            <input \n                className=\"journal__item__remove\" \n                type=\"checkbox\" \n                value={id}\n                id={`item-remove-${journalId}`}\n                onChange={deleteItemHandler} />\n        </li>}\n        </>\n    )\n};\n","import React from \"react\";\nimport TopicPicker from \"../TopicPicker/TopicPicker\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nexport const JournalItemNew = (props) => (\n    <li key=\"new-entry-item\" className=\"journal__item\">\n        <div className=\"journal__item__topic\">\n            <TopicPicker \n                key=\"new-entry-topic-picker\"\n               currentTopic=\"dGVybTo4\" \n            />\n        </div>\n        <div className=\"journal__item__entry\">\n            <TextareaAutosize\n                id=\"item-title-new-entry\"\n                rows=\"1\"\n                defaultValue=\"\"\n                placeholder=\"Enter title\"\n                onKeyUp={props.onEnterHandler}\n            />\n            <input id=\"item-id-new-entry\" type=\"hidden\" value=\"\" />\n        </div>\n    </li>\n);","/*\n* External Dependencies\n*/\nimport React from \"react\";\n\n/*\n* Internal Dependencies\n*/\nimport { JournalItem } from \"./JournalItem\";\nimport { JournalItemNew } from \"./JournalItemNew\";\nimport \"./journal.scss\";\n\nexport const Journal = (props) =>(\n    <ul className=\"journal\">\n        {props.journal.map( journalItem => (\n            <JournalItem\n                key={`journalItem-${journalItem.id}`}\n                id={journalItem.id}\n                journalId={journalItem.journalId}\n                title={journalItem.customFields.journalEntryFieldTitle}\n                topicId={journalItem.topics.nodes[0].id}\n                deleteItemHandler={props.deleteItemHandler}\n                onEnterHandler={props.onEnterHandler} />\n        ))}\n        <JournalItemNew onEnterHandler={props.onEnterHandler}/>\n    </ul>\n);\n","/*\n* External Dependencies\n*/\nimport React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { graphql } from \"@apollo/react-hoc\";\nimport { compose } from 'recompose';\n\n/*\n* Internal Dependencies\n*/\nimport { queries } from \"../../graphql/queries/queries\";\nimport { mutations } from \"../../graphql/mutations/mutations\";\nimport FullWidthBackground from \"../../components/Background/FullWidthBackground\";\nimport Navbar from \"../Navbar/navbar\";\nimport { Journal } from \"../../components/Journal/Journal\";\nimport { months } from \"../../lib/dates\";\nimport useAuth from \"../../hooks/use-auth\";\n\nimport \"./day.scss\";\n\nconst Day = ({\n  updateJournal,\n  createJournal,\n  deleteJournal,\n  match: { params: { day, month, year } } }) => {\n\n  const { user, loggedIn } = useAuth();\n  const userID = user ? user.databaseId : 0;\n  const journalQuery = useQuery(queries.getJournalByDate, {\n    variables: {\n      month: parseInt(month),\n      day: parseInt(day),\n      year: parseInt(year),\n      author: parseInt(userID)\n    }\n  });\n\n  let journal = journalQuery.data && journalQuery.data.journals ? journalQuery.data.journals.nodes : [];\n\n  useEffect(() => {\n    journalQuery.refetch();\n  }, [createJournal, updateJournal, deleteJournal]);\n\n  const onEnterHandler = (e) => {\n    // Submit on enter.\n    if (e.keyCode == 13 && e.shiftKey == false) {\n      onSubmitHandler(e);\n    }\n  }\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n    const listItems = document.querySelectorAll('li');\n    const entries = [];\n    // Loop through inputs.. \n    listItems.forEach(listItem => {\n      // Grab inputs for each item \n      const textareas = listItem.querySelectorAll('textarea');\n      const other = listItem.querySelectorAll('input');\n      const inputs = [...textareas, ...other];\n\n      // Set up your input variables \n      let id = ''\n      let title = '';\n      let topicId = '';\n      let titleElement = null;\n      let idElement = null;\n\n      inputs.forEach(input => {\n        if (input.id.indexOf('item-title') != -1) {\n          title = input.value;\n          titleElement = input;\n        }\n        if (input.id.indexOf('item-id') != -1) {\n          id = input.value;\n          idElement = input;\n        }\n        if (input.classList.contains('topicPicker__selected-topic')) {\n          topicId = input.value;\n        }\n      });\n      console.log(entries);\n      entries.push({\n        id: id,\n        title: title,\n        topicId: topicId,\n        idElement: idElement,\n        titleElement: titleElement\n      });\n    });\n    // Post entries \n    entries.forEach(entry => {\n      if (loggedIn && user && user.capabilities.indexOf('edit_private_posts') != -1) {\n        if (entry.id.length > 1) {\n          // Update entry \n          updateJournal({\n            variables: {\n              id: entry.id,\n              topicId: entry.topicId,\n              journal_entry_field_title: entry.title,\n            },\n          });\n          journalQuery.refetch();\n        } else {\n          if (entry.title.length > 1) {\n            // Create entry\n            createJournal({\n              variables: {\n                journal_entry_field_title: entry.title,\n                topicId: entry.topicId,\n                title: `Journal Item Dated ${new Date()}`\n              },\n              update(cache, { data }) {\n                journalQuery.refetch();\n                journal = journalQuery.data && journalQuery.data.journals ? journalQuery.data.journals.nodes : [];\n                cache.writeQuery({\n                  query: queries.getJournalByDate,\n                  data: {\n                    journals: {\n                      nodes: [\n                        ...journal,\n                        data.createJournal.journal,\n                      ]\n                    },\n                  },\n                });\n              }\n            });\n            entry.idElement.value = \"\";\n            entry.titleElement.value = \"\";\n          }\n        }\n      } else {\n        alert('You must be logged in to add new items.');\n      }\n    });\n  }\n\n  const deleteItemHandler = (e) => {\n    if (loggedIn && user && user.capabilities.indexOf('edit_posts') != -1) {\n      deleteJournal({\n        variables: {\n          id: e.target.value\n        }\n      });\n      journalQuery.refetch();\n    } else {\n      alert('You must be logged in to add new items.');\n    }\n  }\n\n  return (\n    <>\n      <FullWidthBackground id=\"main\" />\n      <Navbar />\n      <form\n        id=\"dayForm\"\n        className=\"day\"\n        method=\"post\"\n        onSubmit={onSubmitHandler}\n        autoComplete=\"off\">\n        <h1>{months[month - 1]} {day}, {year}</h1>\n        <Journal\n          journal={journal}\n          deleteItemHandler={deleteItemHandler}\n          onEnterHandler={onEnterHandler}\n        />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </>\n  );\n};\n\nexport default compose(\n  graphql(mutations.updateJournal, { name: 'updateJournal' }),\n  graphql(mutations.createJournal, { name: 'createJournal' }),\n  graphql(mutations.deleteJournal, { name: 'deleteJournal' })\n)(Day);\n","import { getCalendarMonth, getTime } from \"../../lib/dates\";\n\nconst ui = {\n  calendar: getCalendarMonth(new Date().toString())\n};\n\nexport const uiReducer = (state = ui, action ) => {\n  let updatedState = Object.assign({}, state);\n  switch (action.type) {\n    case \"UPDATE_CALENDAR\":\n      updatedState.calendar = action.calendarMonth;\n      break;\n  }\n  return updatedState;\n};\n","import { combineReducers } from \"redux\";\nimport { uiReducer } from \"./ui\";\n\nexport const rootReducer = combineReducers({\n  ui: uiReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers/root\";\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware));\n\nexport const store = createStore(rootReducer, composedEnhancer);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nstore.subscribe(() => {\n  //console.log(store.getState());\n});\n","/*\n* External dependencies\n*/\nimport {\n    ApolloClient,\n    InMemoryCache,\n} from \"@apollo/client\"\n\nimport { BatchHttpLink } from '@apollo/client/link/batch-http';\n\nexport const cache = new InMemoryCache({});\nconsole.log(process.env.GRAPHQL);\nconst httpLink = new BatchHttpLink({\n    uri: process.env.REACT_APP_GRAPHQL,\n    credentials: 'include'\n});\n\nexport const useApolloClient = () => {\n    return new ApolloClient({\n        link: httpLink,\n        cache\n    });\n}","/*\n* External Dependencies\n*/\nimport React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { ApolloProvider, } from \"@apollo/client\";\n\n/*\n* Internal Dependencies\n*/\nimport Home from \"./views/Home/Home\";\nimport Day from \"./views/Day/Day\";\nimport { store } from \"./redux/store\";\nimport { useApolloClient } from \"./hooks/use-app-apollo\";\nimport { AuthProvider } from \"./hooks/use-auth\";\n\n\n/*\n* Styles\n*/\nimport \"normalize.css\";\nimport \"./styles.scss\";\n\n\nexport default function App() {\n  const client = useApolloClient();\n  return (\n    <ApolloProvider client={client}>\n      <AuthProvider>\n        <Provider store={store}>\n          <BrowserRouter>\n            <Switch>\n              <Route path=\"/calendar/:month/:day/:year\" component={Day} />\n              <Route path=\"/\" component={Home} />\n            </Switch>\n          </BrowserRouter>\n        </Provider>\n      </AuthProvider>\n    </ApolloProvider>\n  );\n}\n","/*\n* External dependencies\n*/\nimport React from 'react';\nimport { render } from \"react-dom\";\n\n/*\n* Internal dependencies\n*/\nimport App from \"./App\";\n\nrender(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}